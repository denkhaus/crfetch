package main

import (
	"fmt"
	"github.com/denkhaus/go-store"
	"github.com/denkhaus/yamlconfig"
)

type Quote struct {
	price     float64
	volume    float64
	symbolId  int
	timeStamp int
}

type ProviderBase struct {
	store  *store.Store
	config *yamlconfig.Config
	self   Provider
	name   string
	pathId string
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Name
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) Name() string {
	return p.name
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatBarHash
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatBarHash(symbolId int) string {
	return fmt.Sprintf("/mkt/%s/bars/%d", p.pathId, symbolId)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatBarKey
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatBarKey(snap int, barTs int) string {
	return fmt.Sprintf("%s/%d", snap, barTs)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatPriceKey
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatPriceKey(symbolId int) string {
	return fmt.Sprintf("%s/p", p.FormatSymbolIdPath(symbolId))
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatVolumeKey
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatVolumeKey(symbolId int) string {
	return ""
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatTimestampPath
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatSymbolIdPath(symbolId int) string {
	return fmt.Sprintf("%s/%d", p.GetQuotesPath(), symbolId)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// GetQuotesPath
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) GetQuotesPath() string {
	return fmt.Sprintf("/mkt/%s/q", p.pathId)
}

type EnumQuotesFunc func(quote Quote)

///////////////////////////////////////////////////////////////////////////////////////////////////////
// EnumQuotesFunc
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) EnumerateQuotes(enumQuotesFunc EnumQuotesFunc) string {

	match := fmt.Sprintf("/mkt/%s/q", p.pathId)
	p.store.EnumerateAll(match, func(idx int, key string) {
		price, err := prov.GetPrice(ts, symbolId)
		if err != nil {
			return err
		}

		volume, err := prov.GetVolume(ts, symbolId)
		if err != nil {
			return err
		}
	})
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RemoveQuotes
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *Provider) RemoveQuotes() error {

	priceSetName := p.FormatPriceKey(symbolId)
	if _, err := p.store.SortedSetRemoveAll(priceSetName); err != nil {
		return fmt.Errorf("unable to remove price info from %s:: error:: %s",
			priceSetName, err.Error())
	}

	volumeSetName := p.FormatVolumeKey(symbolId)
	if len(volumeSetName) > 0 {
		if _, err := p.store.SortedSetRemoveAll(volumeSetName); err != nil {
			return fmt.Errorf("unable to remove volume info from %s:: error:: %s",
				volumeSetName, err.Error())
		}
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetPrice
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) GetPrice(ts int, symbolId int) (float64, error) {

	setName := p.self.FormatPriceKey(symbolId)
	price, err := p.store.SortedSetGet(setName, float64(ts))

	if err != nil {
		return 0.0, fmt.Errorf("get price error at set name %s and ts %d :: error:: %s",
			setName, ts, err.Error())
	}

	if price == nil && err == nil {
		return 0.0, fmt.Warnf("get price at set name %s and ts %d :: price entry not available",
			setName, ts)
	}

	return price, err
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetVolume
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) GetVolume(ts int, symbolId int) (float64, error) {

	setName := p.self.FormatVolumeKey(symbolId)
	volume, err := p.store.SortedSetGet(setName, float64(ts))

	if err != nil {
		return 0.0, fmt.Errorf("get volume error at set name %s and ts %d :: error:: %s",
			setName, ts, err.Error())
	}

	// throw no error here since volume is not mandatory
	if price == nil && err == nil {
		return 0.0, nil
	}

	return volume, nil
}
