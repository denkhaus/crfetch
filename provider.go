package main

import (
	"fmt"
	"github.com/denkhaus/go-etcd/etcd"
	"strconv"
)

type ProviderBase struct {
	etcdClient *etcd.Client
	self       Provider
	name       string
	pathId     string
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Name
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) Name() string {
	return p.name
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatBarKey
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatBarKey(symbolId int, snap int, barTs int) string {
	return fmt.Sprintf("/mkt/%s/barinfo/%d/%d/%d",
		p.pathId, symbolId, snap, barTs)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatPriceKey
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatPriceKey(ts int, symbolId int) string {
	return fmt.Sprintf("%s/%d/p", p.FormatTimestampPath(ts), symbolId)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatVolumeKey
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatVolumeKey(ts int, symbolId int) string {
	return ""
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// FormatTimestampPath
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) FormatTimestampPath(ts int) string {
	return fmt.Sprintf("%s/%d", p.GetQuotesPath(), ts)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// GetQuotesPath
///////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) GetQuotesPath() string {
	return fmt.Sprintf("/mkt/%s/quotes", p.pathId)
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetPrice
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) GetPrice(ts int, symbolId int) (float64, error) {

	priceKey := p.self.FormatPriceKey(ts, symbolId)
	priceString, err := p.etcdClient.GetValue(priceKey)

	if err != nil {
		return 0.0, fmt.Errorf("price key %s is not available:: error:: %s",
			priceKey, err.Error())
	}

	price, err := strconv.ParseFloat(priceString, 64)

	if err != nil {
		return 0.0, fmt.Errorf("unable to parse price data %s to float64:: error:: %s",
			priceString, err.Error())
	}

	return price, err
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetVolume
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
func (p *ProviderBase) GetVolume(ts int, symbolId int) (float64, error) {

	var (
		volume float64
		err    error
	)

	volumeKey := p.self.FormatVolumeKey(ts, symbolId)
	if volumeString, _ := p.etcdClient.GetValue(volumeKey); len(volumeString) > 0 {
		volume, err = strconv.ParseFloat(volumeString, 64)

		if err != nil {
			return 0.0, fmt.Errorf("unable to parse volume data %s to float64:: error:: %s",
				volumeString, err.Error())
		}
	} else {
		return 0.0, nil
	}

	return volume, nil
}
